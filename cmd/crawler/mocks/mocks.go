// Code generated by MockGen. DO NOT EDIT.
// Source: ./cmd/crawler/types.go

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	graph "github.com/mycok/uSearch/internal/graphlink/graph"
	index "github.com/mycok/uSearch/internal/textindexer/index"
)

// MockURLGetter is a mock of URLGetter interface.
type MockURLGetter struct {
	ctrl     *gomock.Controller
	recorder *MockURLGetterMockRecorder
}

// MockURLGetterMockRecorder is the mock recorder for MockURLGetter.
type MockURLGetterMockRecorder struct {
	mock *MockURLGetter
}

// NewMockURLGetter creates a new mock instance.
func NewMockURLGetter(ctrl *gomock.Controller) *MockURLGetter {
	mock := &MockURLGetter{ctrl: ctrl}
	mock.recorder = &MockURLGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLGetter) EXPECT() *MockURLGetterMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockURLGetter) Get(url string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", url)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockURLGetterMockRecorder) Get(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockURLGetter)(nil).Get), url)
}

// MockPrivateNetworkDetector is a mock of PrivateNetworkDetector interface.
type MockPrivateNetworkDetector struct {
	ctrl     *gomock.Controller
	recorder *MockPrivateNetworkDetectorMockRecorder
}

// MockPrivateNetworkDetectorMockRecorder is the mock recorder for MockPrivateNetworkDetector.
type MockPrivateNetworkDetectorMockRecorder struct {
	mock *MockPrivateNetworkDetector
}

// NewMockPrivateNetworkDetector creates a new mock instance.
func NewMockPrivateNetworkDetector(ctrl *gomock.Controller) *MockPrivateNetworkDetector {
	mock := &MockPrivateNetworkDetector{ctrl: ctrl}
	mock.recorder = &MockPrivateNetworkDetectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrivateNetworkDetector) EXPECT() *MockPrivateNetworkDetectorMockRecorder {
	return m.recorder
}

// IsPrivate mocks base method.
func (m *MockPrivateNetworkDetector) IsPrivate(host string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPrivate", host)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsPrivate indicates an expected call of IsPrivate.
func (mr *MockPrivateNetworkDetectorMockRecorder) IsPrivate(host interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPrivate", reflect.TypeOf((*MockPrivateNetworkDetector)(nil).IsPrivate), host)
}

// MockMiniGraph is a mock of MiniGraph interface.
type MockMiniGraph struct {
	ctrl     *gomock.Controller
	recorder *MockMiniGraphMockRecorder
}

// MockMiniGraphMockRecorder is the mock recorder for MockMiniGraph.
type MockMiniGraphMockRecorder struct {
	mock *MockMiniGraph
}

// NewMockMiniGraph creates a new mock instance.
func NewMockMiniGraph(ctrl *gomock.Controller) *MockMiniGraph {
	mock := &MockMiniGraph{ctrl: ctrl}
	mock.recorder = &MockMiniGraphMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMiniGraph) EXPECT() *MockMiniGraphMockRecorder {
	return m.recorder
}

// RemoveStaleEdges mocks base method.
func (m *MockMiniGraph) RemoveStaleEdges(fromID uuid.UUID, updatedBefore time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveStaleEdges", fromID, updatedBefore)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveStaleEdges indicates an expected call of RemoveStaleEdges.
func (mr *MockMiniGraphMockRecorder) RemoveStaleEdges(fromID, updatedBefore interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveStaleEdges", reflect.TypeOf((*MockMiniGraph)(nil).RemoveStaleEdges), fromID, updatedBefore)
}

// UpsertEdge mocks base method.
func (m *MockMiniGraph) UpsertEdge(edge *graph.Edge) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertEdge", edge)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertEdge indicates an expected call of UpsertEdge.
func (mr *MockMiniGraphMockRecorder) UpsertEdge(edge interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertEdge", reflect.TypeOf((*MockMiniGraph)(nil).UpsertEdge), edge)
}

// UpsertLink mocks base method.
func (m *MockMiniGraph) UpsertLink(link *graph.Link) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertLink", link)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertLink indicates an expected call of UpsertLink.
func (mr *MockMiniGraphMockRecorder) UpsertLink(link interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertLink", reflect.TypeOf((*MockMiniGraph)(nil).UpsertLink), link)
}

// MockMiniIndexer is a mock of MiniIndexer interface.
type MockMiniIndexer struct {
	ctrl     *gomock.Controller
	recorder *MockMiniIndexerMockRecorder
}

// MockMiniIndexerMockRecorder is the mock recorder for MockMiniIndexer.
type MockMiniIndexerMockRecorder struct {
	mock *MockMiniIndexer
}

// NewMockMiniIndexer creates a new mock instance.
func NewMockMiniIndexer(ctrl *gomock.Controller) *MockMiniIndexer {
	mock := &MockMiniIndexer{ctrl: ctrl}
	mock.recorder = &MockMiniIndexerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMiniIndexer) EXPECT() *MockMiniIndexerMockRecorder {
	return m.recorder
}

// Index mocks base method.
func (m *MockMiniIndexer) Index(doc *index.Document) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Index", doc)
	ret0, _ := ret[0].(error)
	return ret0
}

// Index indicates an expected call of Index.
func (mr *MockMiniIndexerMockRecorder) Index(doc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockMiniIndexer)(nil).Index), doc)
}
