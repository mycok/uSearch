// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: index.api.proto

package indexproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TextIndexerClient is the client API for TextIndexer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TextIndexerClient interface {
	// Index adds a new document or updates an existing index entry
	// in case of an existing document.
	Index(ctx context.Context, in *Document, opts ...grpc.CallOption) (*Document, error)
	// Search the index for a particular query and stream the results back to
	// the client. The first response will include the total result count while
	// all subsequent responses will include documents from the resultset.
	Search(ctx context.Context, in *Query, opts ...grpc.CallOption) (TextIndexer_SearchClient, error)
	// UpdateScore updates the PageRank score for a document with the
	// specified link ID.
	UpdateScore(ctx context.Context, in *UpdateScoreRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type textIndexerClient struct {
	cc grpc.ClientConnInterface
}

func NewTextIndexerClient(cc grpc.ClientConnInterface) TextIndexerClient {
	return &textIndexerClient{cc}
}

func (c *textIndexerClient) Index(ctx context.Context, in *Document, opts ...grpc.CallOption) (*Document, error) {
	out := new(Document)
	err := c.cc.Invoke(ctx, "/TextIndexer/Index", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *textIndexerClient) Search(ctx context.Context, in *Query, opts ...grpc.CallOption) (TextIndexer_SearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &TextIndexer_ServiceDesc.Streams[0], "/TextIndexer/Search", opts...)
	if err != nil {
		return nil, err
	}
	x := &textIndexerSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TextIndexer_SearchClient interface {
	Recv() (*QueryResult, error)
	grpc.ClientStream
}

type textIndexerSearchClient struct {
	grpc.ClientStream
}

func (x *textIndexerSearchClient) Recv() (*QueryResult, error) {
	m := new(QueryResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *textIndexerClient) UpdateScore(ctx context.Context, in *UpdateScoreRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/TextIndexer/UpdateScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TextIndexerServer is the server API for TextIndexer service.
// All implementations must embed UnimplementedTextIndexerServer
// for forward compatibility
type TextIndexerServer interface {
	// Index adds a new document or updates an existing index entry
	// in case of an existing document.
	Index(context.Context, *Document) (*Document, error)
	// Search the index for a particular query and stream the results back to
	// the client. The first response will include the total result count while
	// all subsequent responses will include documents from the resultset.
	Search(*Query, TextIndexer_SearchServer) error
	// UpdateScore updates the PageRank score for a document with the
	// specified link ID.
	UpdateScore(context.Context, *UpdateScoreRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedTextIndexerServer()
}

// UnimplementedTextIndexerServer must be embedded to have forward compatible implementations.
type UnimplementedTextIndexerServer struct {
}

func (UnimplementedTextIndexerServer) Index(context.Context, *Document) (*Document, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Index not implemented")
}
func (UnimplementedTextIndexerServer) Search(*Query, TextIndexer_SearchServer) error {
	return status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedTextIndexerServer) UpdateScore(context.Context, *UpdateScoreRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScore not implemented")
}
func (UnimplementedTextIndexerServer) mustEmbedUnimplementedTextIndexerServer() {}

// UnsafeTextIndexerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TextIndexerServer will
// result in compilation errors.
type UnsafeTextIndexerServer interface {
	mustEmbedUnimplementedTextIndexerServer()
}

func RegisterTextIndexerServer(s grpc.ServiceRegistrar, srv TextIndexerServer) {
	s.RegisterService(&TextIndexer_ServiceDesc, srv)
}

func _TextIndexer_Index_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Document)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextIndexerServer).Index(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TextIndexer/Index",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextIndexerServer).Index(ctx, req.(*Document))
	}
	return interceptor(ctx, in, info, handler)
}

func _TextIndexer_Search_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Query)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TextIndexerServer).Search(m, &textIndexerSearchServer{stream})
}

type TextIndexer_SearchServer interface {
	Send(*QueryResult) error
	grpc.ServerStream
}

type textIndexerSearchServer struct {
	grpc.ServerStream
}

func (x *textIndexerSearchServer) Send(m *QueryResult) error {
	return x.ServerStream.SendMsg(m)
}

func _TextIndexer_UpdateScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextIndexerServer).UpdateScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TextIndexer/UpdateScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextIndexerServer).UpdateScore(ctx, req.(*UpdateScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TextIndexer_ServiceDesc is the grpc.ServiceDesc for TextIndexer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TextIndexer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TextIndexer",
	HandlerType: (*TextIndexerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Index",
			Handler:    _TextIndexer_Index_Handler,
		},
		{
			MethodName: "UpdateScore",
			Handler:    _TextIndexer_UpdateScore_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Search",
			Handler:       _TextIndexer_Search_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "index.api.proto",
}
