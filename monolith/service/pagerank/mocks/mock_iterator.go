// Code generated by MockGen. DO NOT EDIT.
// Source: ./linkgraph/graph/graph.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	graph "github.com/mycok/uSearch/linkgraph/graph"
)

// MockGraph is a mock of Graph interface.
type MockGraph struct {
	ctrl     *gomock.Controller
	recorder *MockGraphMockRecorder
}

// MockGraphMockRecorder is the mock recorder for MockGraph.
type MockGraphMockRecorder struct {
	mock *MockGraph
}

// NewMockGraph creates a new mock instance.
func NewMockGraph(ctrl *gomock.Controller) *MockGraph {
	mock := &MockGraph{ctrl: ctrl}
	mock.recorder = &MockGraphMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraph) EXPECT() *MockGraphMockRecorder {
	return m.recorder
}

// Edges mocks base method.
func (m *MockGraph) Edges(fromID, toID uuid.UUID, updatedBefore time.Time) (graph.EdgeIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edges", fromID, toID, updatedBefore)
	ret0, _ := ret[0].(graph.EdgeIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Edges indicates an expected call of Edges.
func (mr *MockGraphMockRecorder) Edges(fromID, toID, updatedBefore interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edges", reflect.TypeOf((*MockGraph)(nil).Edges), fromID, toID, updatedBefore)
}

// FindLink mocks base method.
func (m *MockGraph) FindLink(id uuid.UUID) (*graph.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLink", id)
	ret0, _ := ret[0].(*graph.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLink indicates an expected call of FindLink.
func (mr *MockGraphMockRecorder) FindLink(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLink", reflect.TypeOf((*MockGraph)(nil).FindLink), id)
}

// Links mocks base method.
func (m *MockGraph) Links(fromID, toID uuid.UUID, retrievedBefore time.Time) (graph.LinkIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Links", fromID, toID, retrievedBefore)
	ret0, _ := ret[0].(graph.LinkIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Links indicates an expected call of Links.
func (mr *MockGraphMockRecorder) Links(fromID, toID, retrievedBefore interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Links", reflect.TypeOf((*MockGraph)(nil).Links), fromID, toID, retrievedBefore)
}

// RemoveStaleEdges mocks base method.
func (m *MockGraph) RemoveStaleEdges(fromID uuid.UUID, updatedBefore time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveStaleEdges", fromID, updatedBefore)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveStaleEdges indicates an expected call of RemoveStaleEdges.
func (mr *MockGraphMockRecorder) RemoveStaleEdges(fromID, updatedBefore interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveStaleEdges", reflect.TypeOf((*MockGraph)(nil).RemoveStaleEdges), fromID, updatedBefore)
}

// UpsertEdge mocks base method.
func (m *MockGraph) UpsertEdge(edge *graph.Edge) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertEdge", edge)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertEdge indicates an expected call of UpsertEdge.
func (mr *MockGraphMockRecorder) UpsertEdge(edge interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertEdge", reflect.TypeOf((*MockGraph)(nil).UpsertEdge), edge)
}

// UpsertLink mocks base method.
func (m *MockGraph) UpsertLink(link *graph.Link) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertLink", link)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertLink indicates an expected call of UpsertLink.
func (mr *MockGraphMockRecorder) UpsertLink(link interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertLink", reflect.TypeOf((*MockGraph)(nil).UpsertLink), link)
}

// MockLinkIterator is a mock of LinkIterator interface.
type MockLinkIterator struct {
	ctrl     *gomock.Controller
	recorder *MockLinkIteratorMockRecorder
}

// MockLinkIteratorMockRecorder is the mock recorder for MockLinkIterator.
type MockLinkIteratorMockRecorder struct {
	mock *MockLinkIterator
}

// NewMockLinkIterator creates a new mock instance.
func NewMockLinkIterator(ctrl *gomock.Controller) *MockLinkIterator {
	mock := &MockLinkIterator{ctrl: ctrl}
	mock.recorder = &MockLinkIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLinkIterator) EXPECT() *MockLinkIteratorMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockLinkIterator) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockLinkIteratorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockLinkIterator)(nil).Close))
}

// Error mocks base method.
func (m *MockLinkIterator) Error() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(error)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockLinkIteratorMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLinkIterator)(nil).Error))
}

// Link mocks base method.
func (m *MockLinkIterator) Link() *graph.Link {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Link")
	ret0, _ := ret[0].(*graph.Link)
	return ret0
}

// Link indicates an expected call of Link.
func (mr *MockLinkIteratorMockRecorder) Link() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Link", reflect.TypeOf((*MockLinkIterator)(nil).Link))
}

// Next mocks base method.
func (m *MockLinkIterator) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockLinkIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockLinkIterator)(nil).Next))
}

// MockEdgeIterator is a mock of EdgeIterator interface.
type MockEdgeIterator struct {
	ctrl     *gomock.Controller
	recorder *MockEdgeIteratorMockRecorder
}

// MockEdgeIteratorMockRecorder is the mock recorder for MockEdgeIterator.
type MockEdgeIteratorMockRecorder struct {
	mock *MockEdgeIterator
}

// NewMockEdgeIterator creates a new mock instance.
func NewMockEdgeIterator(ctrl *gomock.Controller) *MockEdgeIterator {
	mock := &MockEdgeIterator{ctrl: ctrl}
	mock.recorder = &MockEdgeIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEdgeIterator) EXPECT() *MockEdgeIteratorMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockEdgeIterator) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockEdgeIteratorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockEdgeIterator)(nil).Close))
}

// Edge mocks base method.
func (m *MockEdgeIterator) Edge() *graph.Edge {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edge")
	ret0, _ := ret[0].(*graph.Edge)
	return ret0
}

// Edge indicates an expected call of Edge.
func (mr *MockEdgeIteratorMockRecorder) Edge() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edge", reflect.TypeOf((*MockEdgeIterator)(nil).Edge))
}

// Error mocks base method.
func (m *MockEdgeIterator) Error() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(error)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockEdgeIteratorMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockEdgeIterator)(nil).Error))
}

// Next mocks base method.
func (m *MockEdgeIterator) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockEdgeIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockEdgeIterator)(nil).Next))
}

// MockIterator is a mock of Iterator interface.
type MockIterator struct {
	ctrl     *gomock.Controller
	recorder *MockIteratorMockRecorder
}

// MockIteratorMockRecorder is the mock recorder for MockIterator.
type MockIteratorMockRecorder struct {
	mock *MockIterator
}

// NewMockIterator creates a new mock instance.
func NewMockIterator(ctrl *gomock.Controller) *MockIterator {
	mock := &MockIterator{ctrl: ctrl}
	mock.recorder = &MockIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIterator) EXPECT() *MockIteratorMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIterator) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockIteratorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIterator)(nil).Close))
}

// Error mocks base method.
func (m *MockIterator) Error() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(error)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockIteratorMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockIterator)(nil).Error))
}

// Next mocks base method.
func (m *MockIterator) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockIterator)(nil).Next))
}
