// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mycok/uSearch/linkgraph/store/api/rpc/proto (interfaces: LinkGraphClient,LinkGraph_LinksClient,LinkGraph_EdgesClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	proto "github.com/mycok/uSearch/linkgraph/store/api/rpc/proto"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockLinkGraphClient is a mock of LinkGraphClient interface.
type MockLinkGraphClient struct {
	ctrl     *gomock.Controller
	recorder *MockLinkGraphClientMockRecorder
}

// MockLinkGraphClientMockRecorder is the mock recorder for MockLinkGraphClient.
type MockLinkGraphClientMockRecorder struct {
	mock *MockLinkGraphClient
}

// NewMockLinkGraphClient creates a new mock instance.
func NewMockLinkGraphClient(ctrl *gomock.Controller) *MockLinkGraphClient {
	mock := &MockLinkGraphClient{ctrl: ctrl}
	mock.recorder = &MockLinkGraphClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLinkGraphClient) EXPECT() *MockLinkGraphClientMockRecorder {
	return m.recorder
}

// Edges mocks base method.
func (m *MockLinkGraphClient) Edges(arg0 context.Context, arg1 *proto.Range, arg2 ...grpc.CallOption) (proto.LinkGraph_EdgesClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Edges", varargs...)
	ret0, _ := ret[0].(proto.LinkGraph_EdgesClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Edges indicates an expected call of Edges.
func (mr *MockLinkGraphClientMockRecorder) Edges(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edges", reflect.TypeOf((*MockLinkGraphClient)(nil).Edges), varargs...)
}

// Links mocks base method.
func (m *MockLinkGraphClient) Links(arg0 context.Context, arg1 *proto.Range, arg2 ...grpc.CallOption) (proto.LinkGraph_LinksClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Links", varargs...)
	ret0, _ := ret[0].(proto.LinkGraph_LinksClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Links indicates an expected call of Links.
func (mr *MockLinkGraphClientMockRecorder) Links(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Links", reflect.TypeOf((*MockLinkGraphClient)(nil).Links), varargs...)
}

// RemoveStaleEdges mocks base method.
func (m *MockLinkGraphClient) RemoveStaleEdges(arg0 context.Context, arg1 *proto.RemoveStaleEdgesQuery, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveStaleEdges", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveStaleEdges indicates an expected call of RemoveStaleEdges.
func (mr *MockLinkGraphClientMockRecorder) RemoveStaleEdges(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveStaleEdges", reflect.TypeOf((*MockLinkGraphClient)(nil).RemoveStaleEdges), varargs...)
}

// UpsertEdge mocks base method.
func (m *MockLinkGraphClient) UpsertEdge(arg0 context.Context, arg1 *proto.Edge, arg2 ...grpc.CallOption) (*proto.Edge, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertEdge", varargs...)
	ret0, _ := ret[0].(*proto.Edge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertEdge indicates an expected call of UpsertEdge.
func (mr *MockLinkGraphClientMockRecorder) UpsertEdge(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertEdge", reflect.TypeOf((*MockLinkGraphClient)(nil).UpsertEdge), varargs...)
}

// UpsertLink mocks base method.
func (m *MockLinkGraphClient) UpsertLink(arg0 context.Context, arg1 *proto.Link, arg2 ...grpc.CallOption) (*proto.Link, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertLink", varargs...)
	ret0, _ := ret[0].(*proto.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertLink indicates an expected call of UpsertLink.
func (mr *MockLinkGraphClientMockRecorder) UpsertLink(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertLink", reflect.TypeOf((*MockLinkGraphClient)(nil).UpsertLink), varargs...)
}

// MockLinkGraph_LinksClient is a mock of LinkGraph_LinksClient interface.
type MockLinkGraph_LinksClient struct {
	ctrl     *gomock.Controller
	recorder *MockLinkGraph_LinksClientMockRecorder
}

// MockLinkGraph_LinksClientMockRecorder is the mock recorder for MockLinkGraph_LinksClient.
type MockLinkGraph_LinksClientMockRecorder struct {
	mock *MockLinkGraph_LinksClient
}

// NewMockLinkGraph_LinksClient creates a new mock instance.
func NewMockLinkGraph_LinksClient(ctrl *gomock.Controller) *MockLinkGraph_LinksClient {
	mock := &MockLinkGraph_LinksClient{ctrl: ctrl}
	mock.recorder = &MockLinkGraph_LinksClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLinkGraph_LinksClient) EXPECT() *MockLinkGraph_LinksClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockLinkGraph_LinksClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockLinkGraph_LinksClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockLinkGraph_LinksClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockLinkGraph_LinksClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockLinkGraph_LinksClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockLinkGraph_LinksClient)(nil).Context))
}

// Header mocks base method.
func (m *MockLinkGraph_LinksClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockLinkGraph_LinksClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockLinkGraph_LinksClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockLinkGraph_LinksClient) Recv() (*proto.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*proto.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockLinkGraph_LinksClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockLinkGraph_LinksClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockLinkGraph_LinksClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockLinkGraph_LinksClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockLinkGraph_LinksClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method.
func (m *MockLinkGraph_LinksClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockLinkGraph_LinksClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockLinkGraph_LinksClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockLinkGraph_LinksClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockLinkGraph_LinksClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockLinkGraph_LinksClient)(nil).Trailer))
}

// MockLinkGraph_EdgesClient is a mock of LinkGraph_EdgesClient interface.
type MockLinkGraph_EdgesClient struct {
	ctrl     *gomock.Controller
	recorder *MockLinkGraph_EdgesClientMockRecorder
}

// MockLinkGraph_EdgesClientMockRecorder is the mock recorder for MockLinkGraph_EdgesClient.
type MockLinkGraph_EdgesClientMockRecorder struct {
	mock *MockLinkGraph_EdgesClient
}

// NewMockLinkGraph_EdgesClient creates a new mock instance.
func NewMockLinkGraph_EdgesClient(ctrl *gomock.Controller) *MockLinkGraph_EdgesClient {
	mock := &MockLinkGraph_EdgesClient{ctrl: ctrl}
	mock.recorder = &MockLinkGraph_EdgesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLinkGraph_EdgesClient) EXPECT() *MockLinkGraph_EdgesClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockLinkGraph_EdgesClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockLinkGraph_EdgesClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockLinkGraph_EdgesClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockLinkGraph_EdgesClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockLinkGraph_EdgesClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockLinkGraph_EdgesClient)(nil).Context))
}

// Header mocks base method.
func (m *MockLinkGraph_EdgesClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockLinkGraph_EdgesClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockLinkGraph_EdgesClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockLinkGraph_EdgesClient) Recv() (*proto.Edge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*proto.Edge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockLinkGraph_EdgesClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockLinkGraph_EdgesClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockLinkGraph_EdgesClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockLinkGraph_EdgesClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockLinkGraph_EdgesClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method.
func (m *MockLinkGraph_EdgesClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockLinkGraph_EdgesClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockLinkGraph_EdgesClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockLinkGraph_EdgesClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockLinkGraph_EdgesClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockLinkGraph_EdgesClient)(nil).Trailer))
}
